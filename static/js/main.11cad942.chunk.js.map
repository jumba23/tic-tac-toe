{"version":3,"sources":["components/Grid-Cell.js","App.js","index.js"],"names":["GridCell","_ref","handleClick","index","element","react_default","a","createElement","Fragment","onClick","e","currentTarget","id","className","App","_useState","useState","_useState2","Object","slicedToArray","xTurn","setXTurn","winnerCombinations","_useState3","Array","fill","_useState4","playGrid","setPlayGrid","_useState5","_useState6","xNumbers","setXNumbers","_useState7","_useState8","oNumbers","setONumbers","_useState9","_useState10","gameOutcome","setGameOutcome","_useState11","_useState12","gameOver","setGameOver","updateGameBoardArray","toConsumableArray","xArr","oArr","push","checkOutcome","arr","symbol","forEach","combination","every","includes","concat","length","style","pointerEvents","map","i","Grid_Cell","key","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.11cad942.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst GridCell = ({ handleClick, index, element }) => {\r\n  const handleOneClick = (e) => {\r\n    return !element ? handleClick(e.currentTarget.id) : null;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div onClick={handleOneClick} className=\"grid-cell\" id={index}>\r\n        {element}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default GridCell;","import React, { useState } from \"react\";\nimport GridCell from \"./components/Grid-Cell\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [xTurn, setXTurn] = useState(true);\n  const winnerCombinations = [\n    [\"0\", \"1\", \"2\"],\n    [\"3\", \"4\", \"5\"],\n    [\"6\", \"7\", \"8\"],\n    [\"0\", \"3\", \"6\"],\n    [\"1\", \"4\", \"7\"],\n    [\"2\", \"5\", \"8\"],\n    [\"0\", \"4\", \"8\"],\n    [\"2\", \"4\", \"6\"],\n  ];\n\n  const [playGrid, setPlayGrid] = useState(Array(9).fill(null));\n  const [xNumbers, setXNumbers] = useState([]);\n  const [oNumbers, setONumbers] = useState([]);\n  const [gameOutcome, setGameOutcome] = useState(\"\");\n  const [gameOver, setGameOver] = useState(\"auto\");\n\n  const handleClick = (id) => {\n    let updateGameBoardArray = [...playGrid];\n    let xArr = [...xNumbers];\n    let oArr = [...oNumbers];\n    if (xTurn) {\n      updateGameBoardArray[id] = \"❌\";\n      xArr.push(id);\n      setXTurn(false);\n      checkOutcome(xArr, \"X\");\n      setXNumbers(xArr);\n    } else {\n      updateGameBoardArray[id] = \"⭕️\";\n      oArr.push(id);\n      setXTurn(true);\n      checkOutcome(oArr, \"O\");\n      setONumbers(oArr);\n    }\n    setPlayGrid(updateGameBoardArray);\n  };\n\n  const checkOutcome = (arr, symbol) => {\n    winnerCombinations.forEach((combination) => {\n      let result = combination.every((element) => {\n        return arr.includes(element);\n      });\n      return (\n        result && [\n          setGameOutcome(`${symbol} is the Winner`),\n          setGameOver(\"none\"),\n        ]\n      );\n    });\n    return arr.length === 5 && symbol === \"X\" && setGameOutcome(\"Tie Game\");\n  };\n\n  const resetGame = () => {\n    setPlayGrid(Array(9).fill(null));\n    setXTurn(true);\n    setGameOutcome(\"\");\n    setXNumbers([]);\n    setONumbers([]);\n    setGameOver(\"auto\");\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Tic Tac Toe</h1>\n      <div className=\"reset-game\">\n        <button onClick={resetGame}>Reset Game</button>\n      </div>\n      <div className=\"grid\" style={{ pointerEvents: gameOver }}>\n        {playGrid.map((e, i) => {\n          return (\n            <GridCell handleClick={handleClick} key={i} index={i} element={e} />\n          );\n        })}\n      </div>\n      {gameOutcome && <div className=\"game-winner\">{gameOutcome}</div>}\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}